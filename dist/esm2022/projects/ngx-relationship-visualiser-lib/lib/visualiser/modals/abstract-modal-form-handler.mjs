import { FormArray, Validators } from '@angular/forms';
import fontAwesomeIcons from '../../models/font-awesome-icons';
export class AbstractModalFormHandler {
    fb;
    createLinkForm;
    createNodeForm;
    fontAwesomeIcons = fontAwesomeIcons;
    constructor(fb) {
        this.fb = fb;
        this.createLinkForm = this.fb.group({
            lineStyle: ['Dotted', Validators.required],
            sourceArrow: [false],
            targetArrow: [false],
            label: this.fb.array([], Validators.required),
        });
        this.createNodeForm = this.fb.group({
            id: '',
            label: this.fb.array([], [Validators.required, this.minLengthArray(1)]),
            imageUrl: [''],
            icon: [''],
            fx: [null],
            fy: [null],
            additionalIcon: [''],
            iconType: ['select'],
        }, { validators: this.iconOrImageValidator });
    }
    get labelArray() {
        return this.createLinkForm.get('label');
    }
    get nodeLabelArray() {
        return this.createNodeForm.get('label');
    }
    addLabel() {
        const labelGroup = this.fb.group({
            label: ['', Validators.required],
            linkIcon: [false],
        });
        this.labelArray.push(labelGroup);
    }
    addNodeLabel() {
        const labelGroup = this.fb.group({
            label: ['', Validators.required],
        });
        this.nodeLabelArray.push(labelGroup);
    }
    removeLabel(index) {
        if (this.labelArray.length > 1) {
            this.labelArray.removeAt(index);
        }
    }
    removeNodeLabel(index) {
        if (this.nodeLabelArray.length > 1) {
            this.nodeLabelArray.removeAt(index);
        }
    }
    resetLinksForm() {
        this.createLinkForm.reset({
            lineStyle: 'Dotted',
            sourceArrow: false,
            targetArrow: false,
            label: this.fb.array([]),
        });
        this.labelArray.clear();
    }
    resetNodeForm() {
        this.createNodeForm.reset({
            label: this.fb.array([]),
            imageUrl: '',
            icon: '',
            additionalIcon: '',
            iconType: 'select',
        });
        this.nodeLabelArray.clear();
    }
    populateEditLinkForm(data) {
        this.createLinkForm.patchValue({
            lineStyle: data.lineStyle,
            sourceArrow: data.sourceArrow,
            targetArrow: data.targetArrow
        });
        if (data.relationships && Array.isArray(data.relationships)) {
            data.relationships.forEach((relationship) => {
                const labelGroup = this.fb.group({
                    labelIndex: [relationship.labelIndex, Validators.required],
                    label: [relationship.label, Validators.required],
                    linkIcon: [relationship.linkIcon]
                });
                this.labelArray.push(labelGroup);
            });
        }
    }
    populateEditNodeForm(data) {
        this.createNodeForm.patchValue({
            id: data.id,
            imageUrl: data.imageUrl,
            icon: data.icon,
            fx: data.fx,
            fy: data.fy,
            additionalIcon: data.additionalIcon,
            iconType: data.imageUrl ? 'url' : 'select'
        });
        this.createNodeForm.setControl('label', this.fb.array(data.label.map(label => this.fb.group({ label: [label, Validators.required] }))));
    }
    iconOrImageValidator(control) {
        const imageUrl = control.get('imageUrl').value;
        const icon = control.get('icon').value;
        if ((imageUrl && icon) || (!imageUrl && !icon)) {
            return { 'iconOrImage': true };
        }
        return null;
    }
    minLengthArray(min) {
        return (control) => {
            if (control instanceof FormArray) {
                return control.length >= min ? null : { minLengthArray: true };
            }
            return null;
        };
    }
}
//# sourceMappingURL=data:application/json;base64,