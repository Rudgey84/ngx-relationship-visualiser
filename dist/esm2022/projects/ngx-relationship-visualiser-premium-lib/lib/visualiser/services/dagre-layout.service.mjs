import * as dagre from '@dagrejs/dagre';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export var Orientation;
(function (Orientation) {
    Orientation["LEFT_TO_RIGHT"] = "LR";
    Orientation["RIGHT_TO_LEFT"] = "RL";
    Orientation["TOP_TO_BOTTOM"] = "TB";
    Orientation["BOTTOM_TO_TOP"] = "BT";
})(Orientation || (Orientation = {}));
export var Alignment;
(function (Alignment) {
    Alignment["CENTER"] = "C";
    Alignment["UP_LEFT"] = "UL";
    Alignment["UP_RIGHT"] = "UR";
    Alignment["DOWN_LEFT"] = "DL";
    Alignment["DOWN_RIGHT"] = "DR";
})(Alignment || (Alignment = {}));
export class DagreNodesOnlyLayout {
    defaultSettings = {
        orientation: Orientation.LEFT_TO_RIGHT,
        marginX: 70,
        marginY: 70,
        edgePadding: 200,
        rankPadding: 300,
        nodePadding: 100,
        curveDistance: 20,
        multigraph: true,
        compound: true,
        align: Alignment.UP_RIGHT,
        acyclicer: undefined,
        ranker: 'network-simplex',
    };
    dagreGraph;
    dagreNodes;
    dagreEdges;
    renderLayout(graph) {
        this.createDagreGraph(graph);
        dagre.layout(this.dagreGraph);
        for (const dagreNodeId in this.dagreGraph._nodes) {
            const dagreNode = this.dagreGraph._nodes[dagreNodeId];
            const node = graph.nodes.find((n) => n.id === dagreNode.id);
            if (node.fx === null && node.fy === null) {
                // Check if the node has any associated edges
                const hasAssociatedEdges = graph.links.some((link) => link.source === dagreNode.id || link.target === dagreNode.id);
                if (hasAssociatedEdges) {
                    node.fx = dagreNode.x;
                    node.fy = dagreNode.y;
                }
            }
            node.dimension = {
                width: dagreNode.width,
                height: dagreNode.height,
            };
        }
        return graph;
    }
    initRenderLayout(graph) {
        this.createDagreGraph(graph);
        dagre.layout(this.dagreGraph);
        let minFy = Infinity;
        for (const dagreNodeId in this.dagreGraph._nodes) {
            const dagreNode = this.dagreGraph._nodes[dagreNodeId];
            const node = graph.nodes.find((n) => n.id === dagreNode.id);
            // Check if the node has any associated edges
            const hasAssociatedEdges = graph.links.some((link) => link.source === dagreNode.id || link.target === dagreNode.id);
            if (hasAssociatedEdges) {
                node.fx = dagreNode.x;
                node.fy = dagreNode.y;
                minFy = Math.min(minFy, dagreNode.y - this.defaultSettings.marginY);
            }
            else {
                // Give them a null value to later random position them only when the layout button is pressed so they come into view
                node.fx = null;
                node.fy = null;
            }
            node.dimension = {
                width: dagreNode.width,
                height: dagreNode.height,
            };
        }
        // Adjust the fy values to start from 0 if there are associated edges
        if (minFy !== Infinity) {
            for (const node of graph.nodes) {
                if (node.fy !== null) {
                    node.fy -= minFy;
                }
            }
        }
        return graph;
    }
    createDagreGraph(graph) {
        const settings = Object.assign({}, this.defaultSettings);
        this.dagreGraph = new dagre.graphlib.Graph({
            compound: settings.compound,
            multigraph: settings.multigraph,
        });
        this.dagreGraph.setGraph({
            rankdir: settings.orientation,
            marginx: settings.marginX,
            marginy: settings.marginY,
            edgesep: settings.edgePadding,
            ranksep: settings.rankPadding,
            nodesep: settings.nodePadding,
            align: settings.align,
            acyclicer: settings.acyclicer,
            ranker: settings.ranker,
            multigraph: settings.multigraph,
            compound: settings.compound,
        });
        this.dagreNodes = graph.nodes.map((n) => {
            const node = Object.assign({}, n);
            node.width = 20;
            node.height = 20;
            node.x = n.fx;
            node.y = n.fy;
            return node;
        });
        this.dagreEdges = graph.links.map((l) => {
            const newLink = Object.assign({}, l);
            return newLink;
        });
        for (const node of this.dagreNodes) {
            if (!node.width) {
                node.width = 20;
            }
            if (!node.height) {
                node.height = 30;
            }
            // update dagre
            this.dagreGraph.setNode(node.id, node);
        }
        // update dagre
        for (const edge of this.dagreEdges) {
            if (settings.multigraph) {
                this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.linkId);
            }
            else {
                this.dagreGraph.setEdge(edge.source, edge.target);
            }
        }
        return this.dagreGraph;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DagreNodesOnlyLayout, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DagreNodesOnlyLayout, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: DagreNodesOnlyLayout, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,